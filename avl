#include<bits/stdc++.h>
using namespace std;
class Node{
    public:
    int key;
    Node *left;
    Node *right;
    int height;
};
int height(Node *N){
    if (N == NULL)
        return 0;
    return N->height;
}
int max(int a, int b){
    return (a > b)? a : b;
}
Node* newNode(int key){
    Node* node = new Node();
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return(node);
}
Node *rightRotate(Node *y){
    Node *x = y->left;
    Node *T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left),height(y->right)) + 1;
    x->height = max(height(x->left),height(x->right)) + 1;
    return x;
}
Node *leftRotate(Node *x){
    Node *y = x->right;
    Node *T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left),height(x->right)) + 1;
    y->height = max(height(y->left),height(y->right)) + 1;
    return y;
}
int getBalance(Node *N){
    if (N == NULL)
        return 0;
    return height(N->left)-height(N->right);
}
Node* insert(Node* node, int key){
    if (node == NULL)
        return(newNode(key));
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node;
    node->height = 1 + max(height(node->left),height(node->right));
    int balance = getBalance(node);
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    if (balance > 1 && key > node->left->key){
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (balance < -1 && key < node->right->key){
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    return node;
}
Node* minValueNode(Node* node){
    Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}
Node* maxValueNode(Node* node){
    Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}
Node* deleteNode(Node* root, int key){
    if (root == NULL)
        return root;
    if ( key < root->key )
        root->left = deleteNode(root->left, key);
    else if( key > root->key )
        root->right = deleteNode(root->right, key);
    else{
        if((root->left == NULL)||(root->right == NULL)){
            Node *temp = root->left ? root->left : root->right;
            if (temp == NULL){
                temp = root;
                root = NULL;
            }
            else{
                *root = *temp;
                free(temp);
            }
        }
        else{
            Node* temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right,temp->key);
        }
    }
    if (root == NULL)
    return root;
    root->height = 1 + max(height(root->left),height(root->right));
    int balance = getBalance(root);
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance > 1 && getBalance(root->left) < 0){
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance < -1 && getBalance(root->right) > 0){
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}
void preOrder(Node *root){
    if(root != NULL){
        cout << root->key << " ";
        preOrder(root->left);
        preOrder(root->right);
    }
}
void inOrder(Node *root){
    if(root != NULL){
        inOrder(root->left);
        cout << root->key << " ";
        inOrder(root->right);
    }
}
void postOrder(Node *root){
    if(root != NULL){
        postOrder(root->left);
        postOrder(root->right);
        cout << root->key << " ";
    }
}
void printGivenLevel(Node* root, int level){
    if (root == NULL)
        return;
    if (level == 1)
        cout << root->key << " ";
    else if (level > 1){
        printGivenLevel(root->left, level-1);
        printGivenLevel(root->right, level-1);
    }
}
void levelOrder(Node* root){
    int h = height(root);
    int i;
    for (i = 1; i <= h; i++)
        printGivenLevel(root, i);
}
Node* search(Node *root,int element){
	while(root!=NULL && element!=root->key){
		if(element<root->key)
			root=root->left;
		else
			root=root->right;
	}
	return root;
}
int search2(Node *root,int element){
	int count=0;
        while(root!=NULL && element!=root->key){
            count++;
            if(element<root->key)
                root=root->left;
            else
                root=root->right;
        }
        if(root==NULL)
		return -1;
	else
		return count;
}
Node* successor(Node *root,Node *temp){
	if(temp->right != NULL)
		return minValueNode(temp->right);
	Node *succ;
	while(root->key != temp->key){
		if(root->key < temp->key){
			root = root->right;
		}
		else if(root->key > temp->key){
			succ = root;
                root = root->left;
		}
	}
	return succ;
}
Node* predecessor(Node *root,Node *temp){
	if(temp->left != NULL)
		return minValueNode(temp->left);
	Node *pred;
	while(root->key != temp->key && root != NULL){
		if(root->key < temp->key){
			root=root->right;
		}
		else if(root->key > temp->key){
			pred=root;
			root=root->left;
		}
	}
	return pred;
}
int main(){
    node *root = NULL,*max,*min,*temp,*temp2;
    int ch,n,a,d,count;
    while(1){
        cout<<"\n MENU: \n\t1.Insert\n\t2.Delete\n\t3.Display\n\t4.Any key to Exit\n Your choice: ";
        cin>>ch;
        switch(ch){
            case 1:
                cout<<"\n Enter the number of nodes to be inserted: ";
                cin>>n;
                for(int i=0;i<n;i++){
                    cout<<"\n Enter the element "<<i+1<<" : ";
                    cin>>a;
                    root=insert(root,a);
                }
                break;
            case 2:
                cout<<"\n Enter the element to be deleted: ";
                cin>>a;
                root = delete_key(root, a);
                break;
            case 3:
                system("CLS");
                cout<<"\n Display menu:\n\t1.Pre order traversal\n\t2.In order traversal\n\t3.Post order traversal\n\t4.Level order traversal";
                cout<<"\n\t5.Level of an element\n\t6.Minimum element\n\t7.Maximum element\n\t8.Successor of an element";
                cout<<"\n\t9.Predecessor of an element\nYour choice: ";
                cin>>d;
                switch(d){
                    case 1:
                        cout<<"\n Pre order traversal of the tree: ";
                        preOrder(root);
                        break;
                    case 2:
                        cout<<"\n In order traversal of the tree: ";
                        inOrder(root);
                        break;
                    case 3:
                        cout<<"\n Post order traversal of the tree: ";
                        postOrder(root);
                        break;
                    case 4:
                        cout<<"\n Level order traversal of the tree: ";
                        levelOrder(root);
                        break;
                    case 5:
                        cout<<"\n Enter the keyword: ";
                        cin>>a;
                        count=search2(root,a);
                        if(count==-1)
                            cout<<"\n The element is not found! ";
                        else
                            cout<<"\nThe element in level "<<count;
                        break;
                    case 6:
                        min=minValueNode(root);
                        cout<<"\n Minimum elment in the tree: "<<min->key;
                        break;
                    case 7:
                        max=maxValueNode(root);
                        cout<<"\n Maximum elment in the tree: "<<max->key;
                        break;
                    case 8:
                        cout << "\nEnter the keyword  : ";
                        cin >> a;
                        temp = search(root,a);
                        if(temp != NULL){
                            temp2 = successor(root,temp);
                            cout<<"\nSuccessor of the element: "<< temp2->key;
                        }
                        else
                            cout<<"\nThe element is not found! ";
                        break;
                    case 9:
                        cout << "\nEnter the keyword  : ";
                        cin >> a;
                        temp = search(root,a);
                        if(temp != NULL){
                            temp2 = predecessor(root,temp);
                            cout<<"\nPredecessor of the element: "<< temp2->key;
                        }
                        else
                            cout<<"\nThe element is not found! ";
                        break;
                }
                break;
            default:
                exit(0);
        }
        char c;
        cout<<"\n Do you want to continue[y/n]: ";
        cin>>c;
        if(c=='y')
            system("CLS");
        else
            exit(0);
    }
    return 0;
}
