
#include<iostream>
#include<queue>
int INT_MAX = 9999;
using namespace std;
struct node
{
    int weight;
    int value;
    node *next;
};
class graph
{
    node **head;
    int n;
    public:
    graph(int a)
    {
        head =new node*[a]();
        for(int i=0;i<a;i++)
            head[i]=NULL;
        n=a;
    }
    void addedges(int src,int dest,int wei)
    {
        node *n=new node;
        n->value=dest;
        n->weight=wei;
        n->next=head[src];
        head[src]=n;
    }
    void dfsprint(int v,bool *visited)
    {
        visited[v]=true;
        cout<<' '<<v<<"->";
        node *ptr=head[v];
        while(ptr!=NULL)
        {
            int k=ptr->value;
            if(!visited[k])
                dfsprint(k,visited);
            ptr=ptr->next;
        }
    }
    void dfs(int v)
    {
        bool *visited = new bool[n];
        for(int i=0;i<n;i++)
            visited[i]=false;
        dfsprint(v,visited);
    }
    void bfs(int v)
    {
        bool *visited = new bool[n];
        for(int i=0;i<n;i++)
            visited[i]=false;
        visited[v]=true;
        queue<int> q;
        q.push(v);
        while(!q.empty())
        {
            int k=q.front();
            cout<<' ' <<k<<"->";
            q.pop();
            node *ptr=head[k];
            while(ptr!=NULL)
            {
                if(!visited[ptr->value])
                {
                    visited[ptr->value]=true;
                    q.push(ptr->value);
                }
                ptr=ptr->next;
            }
        }
    }
    int mindistance(int *dist,bool *set)
    {
        int min=INT_MAX,minin;
        for(int i=0;i<n;i++)
        {
            if(dist[i]<min && set[i]==false)
            {
                min=dist[i];
                minin=i;
            }
        }
        return minin;
    }
    void dijsktras(int v)
    {
        int dist[n];
        bool set[n];
        for(int i=0;i<n;i++)
        {
            dist[i]=INT_MAX;
            set[i]=false;
        }
        dist[v]=0;
        for(int i=0;i<n;i++)
        {
            int u=mindistance(dist,set);
            cout<<u<<' ';
            set[u]=true;
            node *ptr=head[u];
            while(ptr!=NULL)
            {
                int k=ptr->value;
                if(!set[k] && dist[k] > dist[u] +ptr->weight )
                    dist[ptr->value]=dist[u]+ptr->weight;
            ptr=ptr->next;
            }
        }
        cout<<"\n";
        for(int i=0;i<n;i++)
            cout<<v<<" to "<<i<<"->"<<dist[i]<<"\n";
    }
};
int main()
{
    graph g(5);
    g.addedges(0, 1, 3);
    g.addedges(1, 0, 3);
    g.addedges(1, 4, 1);
    g.addedges(4, 1, 1);
    g.addedges(0, 2, 1);
    g.addedges(2, 0, 1);
    g.addedges(1,2,7);
    g.addedges(2,1,7);
    g.addedges(1,3,5);
    g.addedges(3,1,5);
    g.addedges(4,3,7);
    g.addedges(7,4,3);
    g.addedges(2,3,2);
    g.addedges(3,2,2);
    g.dfs(2);
    cout<<"\n";
    g.bfs(1);
    g.dijsktras(0);
}
